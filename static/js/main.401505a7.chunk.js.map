{"version":3,"sources":["store/actions/actionTypes.js","store/reducers/gameReducer.js","store/index.js","helpers/gameUtilities.js","store/actions/index.js","components/Square/Square.js","components/Board/Board.js","components/InformationInput/InformationInput.js","components/MessageBox/MessageBox.js","components/Game/Game.js","index.js"],"names":["PLACE","SETUP","SET_PLAYER_TURN","SET_WINNER","initialState","gameReady","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","state","arguments","length","undefined","action","type","actions","Object","objectSpread","board","players","playerTurn","winner","map","value","index","token","CLEAR_FIELDS","applyMiddleware","thunk","findRandomSquare","remainingPlaces","reduce","openPlaces","nextPlace","concat","toConsumableArray","Math","floor","random","calculateWinner","squaresArray","lines","i","_lines$i","slicedToArray","a","b","c","setup","setWinnerAndClearFields","dispatch","setWinner","clearAllFilters","Array","computer","color","placeAndProceed","getState","filter","square","_getState","nextPlayer","setTimeout","newBoard","randomSquare","place","Square","_ref","onClick","react_default","createElement","className","Board","connect","clearAllFiltersAction","onChooseTile","Square_Square","key","InformationInput","active","MessageBox","hiddenClass","GameContainer","initialTokens","playersTokens","useEffect","InformationInput_InformationInput_InformationInput","MessageBox_MessageBox_MessageBox","render","es","document","getElementById"],"mappings":"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","file":"static/js/main.401505a7.chunk.js","sourcesContent":["export const PLACE = 'PLACE';\nexport const SETUP = 'SETUP';\nexport const SET_PLAYER_TURN = 'SET_PLAYER_TURN';\nexport const SET_WINNER = 'SET_WINNER';\nexport const CLEAR_FIELDS = 'CLEAR_FIELDS';","import * as actions from './../actions/actionTypes';\n\nconst initialState = {\n  gameReady: false\n};\n\nfunction gameReducer(state = initialState, action) {\n  switch (action.type) {\n    case actions.SETUP:\n      return {\n        ...state,\n        board: action.board,\n        players: action.players,\n        playerTurn: 0,\n        gameReady: true,\n        winner: null\n      };\n    case actions.PLACE:\n      return {\n        ...state,\n        board: state.board.map(\n          (value, index) =>\n            index === action.index\n              ? state.players[state.playerTurn].token\n              : value\n        )\n      };\n    case actions.SET_PLAYER_TURN:\n      return {\n        ...state,\n        playerTurn: action.playerTurn\n      };\n    case actions.SET_WINNER:\n      return {\n        ...state,\n        winner: action.winner\n      };\n    case action.CLEAR_FIELDS:\n     return {\n        ...state,\n        board: [null, null, null, null, null, null, null, null, null],\n        players: [{}, {}],\n        playerTurn: 0,\n        gameReady: true,\n        winner: null,\n     }\n    default:\n      return state;\n  }\n}\n\nexport { gameReducer };\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport { gameReducer } from './reducers/gameReducer';\n\nlet composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // eslint-disable-line no-underscore-dangle\n\nconst store = createStore(\n  gameReducer,\n  composeEnhancers(\n    applyMiddleware(thunk),\n  )\n);\n\nexport default store;","export const findRandomSquare = (board) => {\n  // Create a new array that contains all\n  // unoccupied board indexes\n  const remainingPlaces = board.reduce(\n    (openPlaces, nextPlace, index) => {\n      return !nextPlace\n        ? [...openPlaces, index]\n        : openPlaces;\n    },\n    []\n  );\n\n\n  if (!remainingPlaces.length) {\n    return null;\n  }\n\n  const randomIndex = Math.floor(\n    Math.random() * remainingPlaces.length\n  );\n\n  return remainingPlaces[randomIndex];\n}\n\nexport const calculateWinner = squaresArray => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n\n  const { length } = lines;\n\n  for (let i = 0; i < length; i++) {\n    const [a, b, c] = lines[i];\n  \n    if (squaresArray[a] && squaresArray[a] === squaresArray[b] && squaresArray[a] === squaresArray[c]) {\n      return squaresArray[a];\n    }\n  }\n\n  return 'none';\n}\n","import { findRandomSquare, calculateWinner } from '../../helpers/gameUtilities';\n\nimport * as action from './actionTypes';\n\nexport function setup(board, players) {\n  return {\n    type: action.SETUP,\n    board,\n    players\n  };\n}\n\nexport function setPlayerTurn(playerIndex) {\n  return {\n    type: action.SET_PLAYER_TURN,\n    playerTurn: playerIndex\n  };\n}\n\nexport function place(index) {\n  return {\n    type: action.PLACE,\n    index: index\n  };\n}\n\nexport function setWinner(winner) {\n  return {\n    type: action.SET_WINNER,\n    winner\n  };\n}\n\nexport function setWinnerAndClearFields(winner) {\n  return function(dispatch) {\n    dispatch(setWinner(winner));\n  }\n}\n\nexport function clearAllFilters() {\n  return function(dispatch) {\n    dispatch(setup([...Array(9)],[{ computer: false, token: 'X', color: 'antiquewhite'}, { computer: true, token: 'O', color: 'grey' }]))\n  }\n}\n\nexport function placeAndProceed(index) {\n  return function(dispatch, getState) {\n    const openSquares = getState().board.filter(\n      square => !square\n    );\n\n    if (openSquares.length > 0) {\n      dispatch(nextPlayer());\n      dispatch(place(index));\n    }\n    \n    dispatch(checkWinner());\n  };\n}\n\nexport function checkWinner() {\n  return function(dispatch, getState) {\n    if (calculateWinner(getState().board) !== 'none') {\n      dispatch(setWinnerAndClearFields(calculateWinner(getState().board)));\n    }\n  }\n};\n\nexport function playAutomatically() {\n  return function(dispatch, getState) {\n    setTimeout(function() {\n      const newBoard = getState().board;\n      const randomSquare = findRandomSquare(\n        newBoard\n      );\n\n      dispatch(placeAndProceed(randomSquare));\n    }, 600);\n  };\n}\n\nexport function nextPlayer() {\n  return function(dispatch, getState) {\n    const { playerTurn, players } = getState();\n    const nextPlayer =\n      (playerTurn + 1) % players.length;\n    \n    dispatch(setPlayerTurn(nextPlayer));\n    \n    if (players[nextPlayer].computer) {\n      dispatch(playAutomatically());\n    }\n  };\n}\n","import React from 'react';\n\nexport const Square = ({ value, onClick }) => (\n  <div className={`square ${value === 'O' ? 'light' : 'dark'}`} onClick={onClick}>\n    {value}\n  </div>\n);\n\n","import React from 'react';\n\nimport { connect } from 'react-redux';\nimport { clearAllFilters  as clearAllFiltersAction } from './../../store/actions';\nimport { Square } from './../Square/Square';\n\nconst BoardDumb = ({ board, onChooseTile, clearAllFilters }) => {\n  const renderSquare = (value, index) => {\n    return (\n      <Square\n        key={index}\n        value={value}\n        onClick={() => onChooseTile(index)}\n      />\n    );\n  };\n\n  return (\n    <div>\n      <div className=\"board-holder\">\n        <div className=\"board\">\n          {board.map(renderSquare)}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\nconst mapDispatchToProps = (dispatch) => ({\n  clearAllFilters: () => dispatch(clearAllFiltersAction()),\n});\n\nexport const Board = connect(\n  null,\n  mapDispatchToProps,\n)(BoardDumb);\n\n","import React from 'react';\n\nimport './InformationInput.scss';\n \nconst InformationInput = ({token, active}) => {\n  return (\n    <div className={`information-input ${active ? 'active' : ''}`}> {token} </div>\n  )\n}\n\nexport { InformationInput }","import React from 'react';\n\nimport './MessageBox.scss';\n\nconst MessageBox = ({ winner, hiddenClass }) => (\n  <div className={`message-box ${hiddenClass}`}>\n    <p>\n      The winner is: {winner}\n    </p>\n  </div>\n);\n\nexport { MessageBox };","import React, {useEffect } from 'react';\nimport { connect } from \"react-redux\";\n\nimport { setup, placeAndProceed, clearAllFilters as clearAllFiltersAction } from \"./../../store/actions\";\n\nimport './Game.scss';\nimport { Board } from './../Board/Board';\nimport { InformationInput } from './../InformationInput/InformationInput';\nimport { MessageBox } from './../MessageBox/MessageBox';\n\nconst Game = ({ index, players, playerTurn, board, placeAndProceed, gameReady, setup, winner, clearAllFilters }) => {\n  useEffect(() => {\n    if (!gameReady) {\n      setup(\n        [...Array(9)],[{ computer: false, token: 'X', color: 'antiquewhite'}, { computer: true, token: 'O', color: 'grey' }]\n      );\n    }\n  }, [gameReady, setup, winner]);\n\n  const onPlace = (index) => {\n    const isHumanTurn = !players[playerTurn].computer;\n\n    if (isHumanTurn && !board[index] && !winner) {\n      placeAndProceed(index);\n    }\n  };\n\n  \n  return (\n    (gameReady && (\n      <div>\n        <div className=\"players-information\">\n          <InformationInput token={players[0].token} active={players[0].token === players[playerTurn].token} />\n          <InformationInput token={players[1].token} active={players[1].token === players[playerTurn].token} />\n        </div>\n        <Board\n          board={board}\n          onChooseTile={onPlace}\n        />\n        <MessageBox hiddenClass={winner ? '' : 'hidden'} winner={winner} />\n        <div className=\"button-wrapper\">\n          <button onClick={clearAllFilters}>New Game</button>\n        </div>\n      </div>\n    )) ||\n    \"Setting up...\"\n  );\n}\n\nconst mapStateToProps = state => ({\n  gameReady: state.gameReady,\n  board: state.board,\n  playerTurn: state.playerTurn,\n  players: state.players,\n  winner: state.winner,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setup: (initialTokens, playersTokens) => dispatch(setup(initialTokens, playersTokens)),\n  placeAndProceed: (index) => dispatch(placeAndProceed(index)),\n  clearAllFilters: () => dispatch(clearAllFiltersAction()),\n});\n\nexport const GameContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Game);\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.scss';\nimport store from './store/';\nimport { GameContainer } from './components/Game/Game';\n\nconst App = () => (\n  <Provider store={store}>\n    <GameContainer />\n  </Provider>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}